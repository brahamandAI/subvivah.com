"use strict";(()=>{var e={};e.id=5511,e.ids=[5511],e.modules={53524:e=>{e.exports=require("@prisma/client")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},14300:e=>{e.exports=require("buffer")},6113:e=>{e.exports=require("crypto")},12781:e=>{e.exports=require("stream")},73837:e=>{e.exports=require("util")},53862:(e,r,t)=>{t.r(r),t.d(r,{headerHooks:()=>f,originalPathname:()=>y,patchFetch:()=>j,requestAsyncStorage:()=>g,routeModule:()=>m,serverHooks:()=>h,staticGenerationAsyncStorage:()=>p,staticGenerationBailout:()=>v});var s={};t.r(s),t.d(s,{DELETE:()=>l,PUT:()=>c});var a=t(95419),o=t(69108),n=t(99678),i=t(78070),u=t(81494),d=t(46082);async function c(e,{params:r}){try{let t;let s=(e.headers.get("cookie")||"").match(/token=([^;]+)/),a=s?s[1]:null;if(!a)return i.Z.json({error:"Not authenticated"},{status:401});try{t=(0,d.verify)(a,process.env.JWT_SECRET||"your-secret-key")}catch{return i.Z.json({error:"Invalid token"},{status:401})}let{content:o}=await e.json();if(!o)return i.Z.json({error:"Content is required"},{status:400});let n=await u._.message.findUnique({where:{id:r.messageId}});if(!n)return i.Z.json({error:"Message not found"},{status:404});if(n.senderId!==t.userId)return i.Z.json({error:"Not authorized to edit this message"},{status:403});let c=await u._.message.update({where:{id:r.messageId},data:{content:o}});return i.Z.json(c)}catch(e){return console.error("Error updating message:",e),i.Z.json({error:"Failed to update message"},{status:500})}}async function l(e,{params:r}){try{let t;let s=(e.headers.get("cookie")||"").match(/token=([^;]+)/),a=s?s[1]:null;if(!a)return i.Z.json({error:"Not authenticated"},{status:401});try{t=(0,d.verify)(a,process.env.JWT_SECRET||"your-secret-key")}catch{return i.Z.json({error:"Invalid token"},{status:401})}let o=await u._.message.findUnique({where:{id:r.messageId}});if(!o)return i.Z.json({error:"Message not found"},{status:404});if(o.senderId!==t.userId)return i.Z.json({error:"Not authorized to delete this message"},{status:403});return await u._.message.delete({where:{id:r.messageId}}),i.Z.json({success:!0})}catch(e){return console.error("Error deleting message:",e),i.Z.json({error:"Failed to delete message"},{status:500})}}let m=new a.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/messages/[messageId]/route",pathname:"/api/messages/[messageId]",filename:"route",bundlePath:"app/api/messages/[messageId]/route"},resolvedPagePath:"/home/subvivah/htdocs/subvivah.com/src/app/api/messages/[messageId]/route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:g,staticGenerationAsyncStorage:p,serverHooks:h,headerHooks:f,staticGenerationBailout:v}=m,y="/api/messages/[messageId]/route";function j(){return(0,n.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:p})}},81494:(e,r,t)=>{t.d(r,{_:()=>a});var s=t(53524);let a=globalThis.prisma??new s.PrismaClient({log:["query","error","warn"],datasources:{db:{url:process.env.DATABASE_URL}}});(async(e=3,r=1e3)=>{for(let t=0;t<e;t++)try{await a.$connect(),console.log("Successfully connected to MongoDB via Prisma");return}catch(s){console.error(`Failed to connect to database (attempt ${t+1}/${e}):`,s),t===e-1&&(console.error("Max retries reached. Exiting process..."),process.exit(1)),console.log(`Retrying in ${r}ms...`),await new Promise(e=>setTimeout(e,r))}})()}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[1638,6206,6082],()=>t(53862));module.exports=s})();